{"ast":null,"code":"var _jsxFileName = \"/home/george/helida/note-tracker/src/pages/fileupload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport storage from \"../firebase/firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileUpload() {\n  _s();\n\n  // State to store uploaded file\n  // const [file, setFile] = useState(\"\");\n  const allInputs = {\n    imgUrl: ''\n  };\n  const [imageAsFile, setImageAsFile] = useState('');\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs); // progress\n\n  const [percent, setPercent] = useState(0);\n\n  const handleImageAsFile = e => {\n    const image = e.target.files[0];\n    setImageAsFile(imageFile => image);\n  }; // Handle file upload event and update state\n\n\n  const handleFireBaseUpload = e => {\n    e.preventDefault();\n    console.log('start of upload'); // async magic goes here...\n\n    if (imageAsFile === '') {\n      console.error(`not an image, the image file is a ${typeof imageAsFile}`);\n    }\n\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile); //initiates the firebase side uploading \n\n    uploadTask.on('state_changed', snapShot => {\n      //takes a snap shot of the process as it is happening\n      console.log(snapShot);\n      const percent = Math.round(snapShot.bytesTransferred / snapShot.totalBytes * 100); // update progress\n\n      setPercent(percent);\n    }, err => {\n      //catches the errors\n      console.log(err);\n    }, () => {\n      // gets the functions from storage refences the image storage in firebase by the children\n      // gets the download url then sets the image from firebase as the value for the imgUrl key:\n      storage.ref('images').child(imageAsFile.name).getDownloadURL().then(fireBaseUrl => {\n        setImageAsUrl(prevObject => ({ ...prevObject,\n          imgUrl: fireBaseUrl\n        }));\n      });\n    });\n  }; // function handleChange(event) {\n  //     setFile(event.target.files[0]);\n  // }\n  // const handleUpload = () => {\n  //     if (!file) {\n  //         alert(\"Please upload an image first!\");\n  //     }\n  //     const storageRef = ref(storage, `/files/${file.name}`);\n  //     // progress can be paused and resumed. It also exposes progress updates.\n  //     // Receives the storage reference and the file to upload.\n  //     const uploadTask = uploadBytesResumable(storageRef, file);\n  //     uploadTask.on(\n  //         \"state_changed\",\n  //         (snapshot) => {\n  //             const percent = Math.round(\n  //                 (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n  //             );\n  //             // update progress\n  //             setPercent(percent);\n  //         },\n  //         (err) => console.log(err),\n  //         () => {\n  //             // download url\n  //             getDownloadURL(uploadTask.snapshot.ref).then((url) => {\n  //                 console.log(url);\n  //             });\n  //         }\n  //     );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleImageAsFile,\n      accept: \"/image/*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFireBaseUpload,\n      children: \"Upload to Firebase\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [percent, \" \\\"% done\\\"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FileUpload, \"25BeM50Yaz6OAfLvnNJjzB2W/LQ=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useEffect","storage","ref","uploadBytesResumable","getDownloadURL","FileUpload","allInputs","imgUrl","imageAsFile","setImageAsFile","imageAsUrl","setImageAsUrl","percent","setPercent","handleImageAsFile","e","image","target","files","imageFile","handleFireBaseUpload","preventDefault","console","log","error","uploadTask","name","put","on","snapShot","Math","round","bytesTransferred","totalBytes","err","child","then","fireBaseUrl","prevObject"],"sources":["/home/george/helida/note-tracker/src/pages/fileupload.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport storage from \"../firebase/firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n\nfunction FileUpload() {\n    // State to store uploaded file\n    // const [file, setFile] = useState(\"\");\n    const allInputs = { imgUrl: '' }\n    const [imageAsFile, setImageAsFile] = useState('')\n    const [imageAsUrl, setImageAsUrl] = useState(allInputs)\n\n    // progress\n    const [percent, setPercent] = useState(0);\n\n    const handleImageAsFile = (e) => {\n        const image = e.target.files[0]\n        setImageAsFile(imageFile => (image))\n    }\n\n    // Handle file upload event and update state\n    const handleFireBaseUpload = e => {\n        e.preventDefault()\n        console.log('start of upload')\n        // async magic goes here...\n        if (imageAsFile === '') {\n            console.error(`not an image, the image file is a ${typeof (imageAsFile)}`)\n        }\n        const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\n        //initiates the firebase side uploading \n        uploadTask.on('state_changed',\n            (snapShot) => {\n                //takes a snap shot of the process as it is happening\n                console.log(snapShot)\n                const percent = Math.round(\n                    (snapShot.bytesTransferred / snapShot.totalBytes) * 100\n                );\n\n                // update progress\n                setPercent(percent);\n            }, (err) => {\n                //catches the errors\n                console.log(err)\n            }, () => {\n                // gets the functions from storage refences the image storage in firebase by the children\n                // gets the download url then sets the image from firebase as the value for the imgUrl key:\n                storage.ref('images').child(imageAsFile.name).getDownloadURL()\n                    .then(fireBaseUrl => {\n                        setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\n                    })\n            })\n    }\n    // function handleChange(event) {\n    //     setFile(event.target.files[0]);\n    // }\n\n    // const handleUpload = () => {\n    //     if (!file) {\n    //         alert(\"Please upload an image first!\");\n    //     }\n\n    //     const storageRef = ref(storage, `/files/${file.name}`);\n\n    //     // progress can be paused and resumed. It also exposes progress updates.\n    //     // Receives the storage reference and the file to upload.\n    //     const uploadTask = uploadBytesResumable(storageRef, file);\n\n    //     uploadTask.on(\n    //         \"state_changed\",\n    //         (snapshot) => {\n    //             const percent = Math.round(\n    //                 (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n    //             );\n\n    //             // update progress\n    //             setPercent(percent);\n    //         },\n    //         (err) => console.log(err),\n    //         () => {\n    //             // download url\n    //             getDownloadURL(uploadTask.snapshot.ref).then((url) => {\n    //                 console.log(url);\n    //             });\n    //         }\n    //     );\n    // };\n\n    return (\n        <div className=\"App\">\n            {/* //form for handling file upload */}\n            {/* <form>\n                <input\n                    // allows you to reach into your file directory and upload image to the browser\n                    type=\"file\"\n                    onChange={handleImageAsFile}\n                />\n                <button onClick={handleFireBaseUpload}></button>\n            </form>\n\n            <img src={imageAsUrl.imgUrl} alt=\"image tag\" /> */}\n\n            <input type=\"file\" onChange={handleImageAsFile} accept=\"/image/*\" />\n            <button onClick={handleFireBaseUpload}>Upload to Firebase</button>\n            <p>{percent} \"% done\"</p>\n\n\n        </div>\n    )\n\n}\n\nexport default FileUpload;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,GAAT,EAAcC,oBAAd,EAAoCC,cAApC,QAA0D,kBAA1D;;;AAEA,SAASC,UAAT,GAAsB;EAAA;;EAClB;EACA;EACA,MAAMC,SAAS,GAAG;IAAEC,MAAM,EAAE;EAAV,CAAlB;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACO,SAAD,CAA5C,CALkB,CAOlB;;EACA,MAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,CAAD,CAAtC;;EAEA,MAAMe,iBAAiB,GAAIC,CAAD,IAAO;IAC7B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAAd;IACAT,cAAc,CAACU,SAAS,IAAKH,KAAf,CAAd;EACH,CAHD,CAVkB,CAelB;;;EACA,MAAMI,oBAAoB,GAAGL,CAAC,IAAI;IAC9BA,CAAC,CAACM,cAAF;IACAC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAF8B,CAG9B;;IACA,IAAIf,WAAW,KAAK,EAApB,EAAwB;MACpBc,OAAO,CAACE,KAAR,CAAe,qCAAoC,OAAQhB,WAAa,EAAxE;IACH;;IACD,MAAMiB,UAAU,GAAGxB,OAAO,CAACC,GAAR,CAAa,WAAUM,WAAW,CAACkB,IAAK,EAAxC,EAA2CC,GAA3C,CAA+CnB,WAA/C,CAAnB,CAP8B,CAQ9B;;IACAiB,UAAU,CAACG,EAAX,CAAc,eAAd,EACKC,QAAD,IAAc;MACV;MACAP,OAAO,CAACC,GAAR,CAAYM,QAAZ;MACA,MAAMjB,OAAO,GAAGkB,IAAI,CAACC,KAAL,CACXF,QAAQ,CAACG,gBAAT,GAA4BH,QAAQ,CAACI,UAAtC,GAAoD,GADxC,CAAhB,CAHU,CAOV;;MACApB,UAAU,CAACD,OAAD,CAAV;IACH,CAVL,EAUQsB,GAAD,IAAS;MACR;MACAZ,OAAO,CAACC,GAAR,CAAYW,GAAZ;IACH,CAbL,EAaO,MAAM;MACL;MACA;MACAjC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBiC,KAAtB,CAA4B3B,WAAW,CAACkB,IAAxC,EAA8CtB,cAA9C,GACKgC,IADL,CACUC,WAAW,IAAI;QACjB1B,aAAa,CAAC2B,UAAU,KAAK,EAAE,GAAGA,UAAL;UAAiB/B,MAAM,EAAE8B;QAAzB,CAAL,CAAX,CAAb;MACH,CAHL;IAIH,CApBL;EAqBH,CA9BD,CAhBkB,CA+ClB;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,oBACI;IAAK,SAAS,EAAC,KAAf;IAAA,wBAaI;MAAO,IAAI,EAAC,MAAZ;MAAmB,QAAQ,EAAEvB,iBAA7B;MAAgD,MAAM,EAAC;IAAvD;MAAA;MAAA;MAAA;IAAA,QAbJ,eAcI;MAAQ,OAAO,EAAEM,oBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdJ,eAeI;MAAA,WAAIR,OAAJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAfJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAsBH;;GAxGQP,U;;KAAAA,U;AA0GT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}